/*
 * This file has been auto-generated by '@kontent-ai/sync-sdk@9.1.0'.
 * 
 * (c) Kontent.ai
 *  
 * -------------------------------------------------------------------------------
 * 
 * Project: KOA 
 * Environment: Production
 * Id: 8381787f-717e-007f-809d-a80af690508b
 * 
 * -------------------------------------------------------------------------------
 */


            import type { TypeCodenames } from '../system/types.generated.js';
import type { Elements, IContentItem } from '@kontent-ai/delivery-sdk';
import type { CollectionCodenames } from '../system/collections.generated.js';
import type { CoreType } from '../system/types.generated.js';
import type { LanguageCodenames } from '../system/languages.generated.js';
import type { PersonType } from '../types/person-type.generated.js';
import type { WorkflowCodenames, WorkflowStepCodenames } from '../system/workflows.generated.js';
           
            /*
* Type representing codename of 'Service' type
*/
            export type ServiceTypeCodename = keyof Pick<Record<TypeCodenames, null>, "service">;

            /*
* Typeguard for codename of 'Service' type
*/
            export function isServiceTypeCodename(value: string | undefined | null): value is ServiceTypeCodename {
                return typeof value === 'string' && value === ('service' satisfies ServiceTypeCodename);
            }

/*
    * Service
    *
    * Id: 018a2215-31b9-4366-9209-f292e03d79ec
* Codename: service
    */
export type ServiceType = IContentItem<
{
/*
    * Name
    *
    * Codename: name
* Id: 90446bdc-f5dd-4442-b94e-0ca1238f3917
* Type: text
* Required: true
    */
                readonly name: Elements.TextElement;

/*
    * Image
    *
    * Codename: image
* Id: 2e25cdc1-795e-4342-8c86-e3bafbedd21c
* Type: asset
* Required: true
    */
                readonly image: Elements.AssetsElement;

/*
    * Summary
    *
    * Codename: summary
* Id: 2e46fa0f-e79c-47c8-8c79-748cf73bebe7
* Type: text
* Required: true
    */
                readonly summary: Elements.TextElement;

/*
    * Description
    *
    * Codename: description
* Id: d0bbf2c9-3a64-4549-8795-00f4bfe5a19d
* Type: rich_text
* Required: true
    */
                readonly description: Elements.RichTextElement<CoreType>;

/*
    * Team
    *
    * Codename: team
* Id: 5ec9b177-55a4-4e7d-af1a-5629b54db2e8
* Type: modular_content
* Required: true
* Allowed content types: person
    */
                readonly team: Elements.LinkedItemsElement<PersonType>;

/*
    * taxonomy
    *
    * Codename: medical_specialties
* Id: 7be1529e-bf12-457c-bb7e-b852bd81ec0f
* Type: taxonomy
* Required: false
    */
                readonly medical_specialties: Elements.TaxonomyElement;

/*
    * URL slug
    *
    * Codename: url_slug
* Id: 3c27fdbf-6286-4212-972c-8e5d6f08a857
* Type: url_slug
* Required: true
    */
                readonly url_slug: Elements.UrlSlugElement;}, 
ServiceTypeCodename, LanguageCodenames, CollectionCodenames, WorkflowCodenames, WorkflowStepCodenames>

/*
* Type representing all available element codenames for Service
*/
export type ServiceTypeElementCodenames = 'name' | 'image' | 'summary' | 'description' | 'team' | 'medical_specialties' | 'url_slug';;

/*
    * Type guard for Service
    *
    * Id: 018a2215-31b9-4366-9209-f292e03d79ec
* Codename: service
    */
export function isServiceType(item: IContentItem | undefined | null): item is ServiceType {
                return item?.system.type === ('service' satisfies ServiceTypeCodename);
            };



            