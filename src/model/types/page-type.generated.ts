/*
 * This file has been auto-generated by '@kontent-ai/sync-sdk@9.1.0'.
 * 
 * (c) Kontent.ai
 *  
 * -------------------------------------------------------------------------------
 * 
 * Project: KOA 
 * Environment: Production
 * Id: 8381787f-717e-007f-809d-a80af690508b
 * 
 * -------------------------------------------------------------------------------
 */


            import type { TypeCodenames } from '../system/types.generated.js';
import type { Elements, IContentItem } from '@kontent-ai/delivery-sdk';
import type { AttractionType } from '../types/attraction-type.generated.js';
import type { CallToActionType } from '../types/call-to-action-type.generated.js';
import type { CollectionCodenames } from '../system/collections.generated.js';
import type { CoreType } from '../system/types.generated.js';
import type { DisclaimerType } from '../types/disclaimer-type.generated.js';
import type { EventType } from '../types/event-type.generated.js';
import type { LanguageCodenames } from '../system/languages.generated.js';
import type { MetadataSnippet } from '../snippets/metadata-snippet.generated.js';
import type { RecipeType } from '../types/recipe-type.generated.js';
import type { RecreationType } from '../types/recreation-type.generated.js';
import type { VideoType } from '../types/video-type.generated.js';
import type { WorkflowCodenames, WorkflowStepCodenames } from '../system/workflows.generated.js';
           
            /*
* Type representing codename of 'Page' type
*/
            export type PageTypeCodename = keyof Pick<Record<TypeCodenames, null>, "page">;

            /*
* Typeguard for codename of 'Page' type
*/
            export function isPageTypeCodename(value: string | undefined | null): value is PageTypeCodename {
                return typeof value === 'string' && value === ('page' satisfies PageTypeCodename);
            }

/*
    * Page
    *
    * Id: 4bdd2f8f-3acc-4744-b005-8f629948ec13
* Codename: page
    */
export type PageType = IContentItem<
{
/*
    * Headline
    *
    * Codename: headline
* Id: 05721c93-8dcb-4daa-81b6-df690efaef61
* Type: text
* Required: true
    */
                readonly headline: Elements.TextElement;

/*
    * Subheadline
    *
    * Codename: subheadline
* Id: 719d23e7-d174-498f-b0aa-46640791b5fb
* Type: text
* Required: true
    */
                readonly subheadline: Elements.TextElement;

/*
    * Hero Image
    *
    * Codename: hero_image
* Id: 35be9ac2-8024-410e-ab79-78709a9695f1
* Type: asset
* Required: false
    */
                readonly hero_image: Elements.AssetsElement;

/*
    * Body
    *
    * Codename: body
* Id: c5ac868e-97fe-419a-a256-635af1fb70aa
* Type: rich_text
* Required: false
* Allowed content types: video, disclaimer, call_to_action, attraction, event, recreation, recipe
    */
                readonly body: Elements.RichTextElement<VideoType | DisclaimerType | CallToActionType | AttractionType | EventType | RecreationType | RecipeType>;

/*
    * URL
    *
    * Codename: url
* Id: 31e8a7c4-b997-4112-adb9-c11730348a87
* Type: url_slug
* Required: true
    */
                readonly url: Elements.UrlSlugElement;

/*
    * Subpages
    *
    * Codename: subpages
* Id: 17024df9-8457-45ed-ba2d-a2235a72dd06
* Type: subpages
* Required: false
    */
                readonly subpages: Elements.LinkedItemsElement<CoreType>;} & MetadataSnippet, 
PageTypeCodename, LanguageCodenames, CollectionCodenames, WorkflowCodenames, WorkflowStepCodenames>

/*
* Type representing all available element codenames for Page
*/
export type PageTypeElementCodenames = 'headline' | 'subheadline' | 'hero_image' | 'body' | 'metadata__title' | 'metadata__keywords' | 'metadata__description' | 'url' | 'subpages';;

/*
    * Type guard for Page
    *
    * Id: 4bdd2f8f-3acc-4744-b005-8f629948ec13
* Codename: page
    */
export function isPageType(item: IContentItem | undefined | null): item is PageType {
                return item?.system.type === ('page' satisfies PageTypeCodename);
            };



            